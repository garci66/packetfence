# Copyright (C) Inverse inc.

# - Retrieve all the installed software on the device and test
# if the attribute Caption contains Google
# - If it matched then trigger a security event
# (with the custom trigger GOOGLE_SOFTWARE_INSTALLED
# for the MAC address of the device.
[Software_Installed]
namespace=ROOT\cimv2
request=select * from Win32_Product
action= <<EOT
[Google]
attribute = Caption
operator = match
value = Google

[1:Google]
action=trigger_security_event
action_param = mac = $mac, tid = GOOGLE_SOFTWARE_INSTALLED, type = CUSTOM
EOT

# KB from Windows Update installed in the last 30 days 
[ServicePackUpdated]
namespace=ROOT\cimv2
request=SELECT HotFixID,InstalledOn FROM Win32_QuickFixEngineering
action= <<EOT
[InstalledOn]
operator = advance
value = Date.Diff('DAYS', Date.Now(), Date.Parse("%m/%d/%Y", ${InstalledOn})) > 30

[1:InstalledOn]
match=all
action=trigger_security_event
action_param = mac = $mac, tid = SERVICE_PACK_OUTDATED, type = CUSTOM
EOT

# - Retrieve the current logged user on the device and register the
# device based on the user account.
[logged_user]
namespace=ROOT\cimv2
request=select UserName from Win32_ComputerSystem
action= <<EOT
[UserName]
attribute = UserName
operator = match
value = (.*)

[1:UserName]
action = dynamic_register_node
action_param = mac = $mac, username = $result->{'UserName'}
EOT

# - Retrieve all the running process on the device and if one match
# explorer.exe then we bypass the scan.
[Process_Running]
namespace=ROOT\cimv2
request=select Name from Win32_Process
action= <<EOT
[explorer]
attribute = Name
operator = match
value = explorer.exe

[1:explorer]
action = allow
EOT

[Process_Not_Running-Antivirus]
request=select Name from Win32_Process WHERE Name='antivirus.exe'
namespace=ROOT\cimv2
action= <<EOT
[antivirus]
attribute = Name
operator = true
value = antivirus.exe
[1:antivirus]
action=trigger_security_event
action_param = mac = $mac, tid = PROCESS_ANTIVIRUS, type = CUSTOM
only_match_when_empty=enabled
EOT

# Detect if the SCCM client is installed
[SCCM]
request=select * from Win32_Process where name='CcmExec.exe'
action=[sccm]
namespace=ROOT\cimv2
on_tab=1

# Detect if the SCCM client is not running and will trigger a Security Event 
#[SCCM]
#request=select * from Win32_Process where name='CcmExec.exe'
#namespace=ROOT\cimv2
#action= <<EOT
#[SCCM]
#attribute = Name
#operator = match
#value = CcmExec.exe
#
#[1:SCCM]
#action=trigger_security_event
#action_param = mac = $mac, tid = YOUR-CUSTOM-EVENT, type = CUSTOM
#EOT
#on_tab=0


# Detect security product like Firewall, Antivirus or Antispyware
[FireWall]
request=select * from FirewallProduct
action= <<EOT
[firewall]
attribute = Name
operator = match
value = *
EOT
namespace=ROOT\SecurityCenter2
on_tab=1

[Antivirus]
request=select * from AntiVirusProduct
namespace=ROOT\SecurityCenter2
action=[antivirus]
on_tab=1

[AntiSpyware]
request=select * from AntiSpywareProduct
namespace=ROOT\SecurityCenter2
action=[antispyware]
on_tab=1

# Detect if TCP port 25 is open (SMTP)
# This example can be used for all TCP ports, change the value by the ports you want, example: value = ^(143|465|587)$
[SMTP Open]
request=select LocalPort from MSFT_NetTCPConnection
namespace=ROOT\StandardCIMV2
action= <<EOT
[PortOpen]
attribute = LocalPort
operator = match
value = 25

[1:PortOpen]
action=trigger_security_event
action_param = mac = $mac, tid = YOUR-CUSTOM-EVENT, type = CUSTOM
EOT
on_tab=0

# Detect if UDP ports 137,138,139 are open (NetBIOS)
# This example can be used for all UDP ports, change the value by the ports you want, example for SNMP: value = ^(161|162)$
[NetBIOS Open]
request=select LocalPort from MSFT_NetUDPEndpoint
namespace=ROOT\StandardCIMV2
action= <<EOT
[PortOpen]
attribute = LocalPort
operator = match
value = ^(137|138|139)$

[1:PortOpen]
action=trigger_security_event
action_param = mac = $mac, tid = YOUR-CUSTOM-EVENT, type = CUSTOM
EOT
on_tab=0

# Template to check if a specific TCP port is open, you can check the SMTP open example.
[TCP Open]
request=select LocalPort from MSFT_NetTCPConnection
namespace=ROOT\StandardCIMV2
action= <<EOT
[PortOpen]
attribute = LocalPort
operator = match
value = *

[1:PortOpen]
action=trigger_security_event
action_param = mac = $mac, tid = YOUR-CUSTOM-EVENT, type = CUSTOM
EOT
on_tab=0

# Template to check if a specific UDP port is open, you can check the NetBios open example.
[UDP Open]
request=select LocalPort from MSFT_NetUDPEndpoint
namespace=ROOT\StandardCIMV2
action= <<EOT
[PortOpen]
attribute = LocalPort
operator = match
value = *

[1:PortOpen]
action=trigger_security_event
action_param = mac = $mac, tid = YOUR-CUSTOM-EVENT, type = CUSTOM
EOT
on_tab=0

