# Copyright (C) Inverse inc.
0.0.0.0:9999 {
  tls /usr/local/pf/conf/ssl/server.crt /usr/local/pf/conf/ssl/server.key

  log / stdout "api-frontend-access {remote} - {user} [{when}] \"{method} {uri} {proto}\" {status} {size} \"{>Referer}\" \"{>User-Agent}\"" {
    except /api/v1/remote_clients/events
    except /api/v1/remote_clients/my_events
  }

  errors {
    502 /usr/local/pf/html/pfappserver/root/static/502.json
    503 /usr/local/pf/html/pfappserver/root/static/503.json
  }

  pfconfigpool {
    dont_rlock /api/v1/remote_clients/events
    dont_rlock /api/v1/remote_clients/my_events
  }

  logger {
    level INFO
  }
  statsd {
    proto udp
    prefix api
  }

  cors /api/v1 {
    allowed_headers Authorization,Content-Type,X-PacketFence-Tenant-Id
    methods GET,OPTIONS,POST,DELETE,PUT,PATCH
  }

  api-aaa
  
  api

  log-tailer

  # Job status access
  job-status

  # pfipset API access
  proxy /api/v1/ipset/ 127.0.0.1:22223 {
    transparent
  }
  
  # pfdhcp API access
  proxy /api/v1/dhcp/ 127.0.0.1:22222 {
    transparent
  }
  
  # pfsso API access
  proxy /api/v1/firewall_sso/ 127.0.0.1:8777 {
    transparent
  }

  # pfpki API access
  proxy /api/v1/pki/ 127.0.0.1:22225 {
    transparent
  }
  
  # pfztn API access
  proxy /api/v1/remote_clients/ 127.0.0.1:22226 {
    transparent
  }
  
  # Everything else goes to the Perl API
  proxy /api/v1/ 127.0.0.1:22224 {
    transparent
    timeout 10m
  }

  # doh forward
  proxy /dns-query http://127.0.0.1:853 {
      transparent
  }

  # doh peers forward
  proxy /dns-ztn-query http://127.0.0.1:854 {
      transparent
  }

  timeouts {
    write 10m
    idle 10m
  }
}

####
## The configuration below allows to use this server as a proxy
#0.0.0.0:9990 {
#  pfconfigpool
#  logger {
#    level INFO
#  }
#  statsd {
#    proto udp
#    prefix api-proxy
#  }
#
#  api-aaa
#  forwardproxy
#}

