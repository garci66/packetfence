# PacketFence system checks


# - Alert every day at 6AM
# - Do not use Monit alerting since calling external 'mail' command
CHECK PROGRAM patch WITH PATH /usr/local/pf/addons/pf-maint.pl -t
    group PacketFence
    every "0 6 * * *"
    [% FOREACH email IN EMAILS %]
        noalert [% email %]
        if status != 0 then exec "[% MAIL_BIN %] -s '[% SUBJECT_IDENTIFIER %] - PacketFence maintenance patch available' [% email %]"
    [% END %]


# PacketFence services checks

CHECK PROCESS packetfence-config MATCHING "pfconfig"
    group PacketFence
    start program = "[% SERVICE_BIN %] packetfence-config restart" with timeout 60 seconds
    stop program  = "[% SERVICE_BIN %] packetfence-config stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-redis-cache MATCHING "redis-server \*:6379"
    group PacketFence
    start program = "[% SERVICE_BIN %] packetfence-redis-cache restart" with timeout 60 seconds
    stop program  = "[% SERVICE_BIN %] packetfence-redis-cache stop"
    if failed host 127.0.0.1 port 6379 protocol redis for 5 cycles then alert
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-haproxy MATCHING "haproxy-systemd-wrapper"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service haproxy restart" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service haproxy stop"
    if 3 restarts within 10 cycles then alert
    if failed host 127.0.0.1 port 1080 protocol http status 404 for 5 cycles then alert
    [% IF ACTIVE_ACTIVE %]if failed host 127.0.0.1 port 3306 protocol mysql for 5 cycles then alert[% END %]

CHECK PROCESS packetfence-pfdhcp MATCHING "pfdhcp"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service pfdhcp start" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service pfdhcp stop"
    if 3 restarts within 10 cycles then alert
    if cpu usage > 90% for 10 cycles then restart
    if mem > 1024 MB for 10 cycles then restart

CHECK PROCESS packetfence-httpd.aaa MATCHING "pf/var/conf/httpd.conf.d/httpd.aaa"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service httpd.aaa restart" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service httpd.aaa stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-httpd.admin MATCHING "pf/var/conf/httpd.conf.d/httpd.admin"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service httpd.admin restart" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service httpd.admin stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-httpd.parking MATCHING "pf/var/conf/httpd.conf.d/httpd.parking"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service httpd.parking restart" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service httpd.parking stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-httpd.portal MATCHING "pf/var/conf/httpd.conf.d/httpd.portal"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service httpd.portal restart" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service httpd.portal stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-httpd.webservices MATCHING "pf/var/conf/httpd.conf.d/httpd.webservices"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service httpd.webservices restart" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service httpd.webservices stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-pfdns MATCHING "pfdns"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service pfdns restart" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service pfdns stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-pfipset MATCHING "pfipset"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service pfipset start" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service pfipset stop"
    if 3 restarts within 10 cycles then alert
    if cpu usage > 90% for 10 cycles then restart
    if mem > 1024 MB for 10 cycles then restart

CHECK PROCESS packetfence-pfmon MATCHING "pfmon"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service pfmon restart" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service pfmon stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-pfdhcplistener MATCHING "pfdhcplistener"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service pfdhcplistener restart" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service pfdhcplistener stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-pfqueue MATCHING "pfqueue"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service pfqueue restart" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service pfqueue stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-radiusd-acct MATCHING "pf/raddb -n acct"
    group PacketFence
    start program = "[% SERVICE_BIN %] packetfence-radiusd-acct restart"
    stop program  = "[% SERVICE_BIN %] packetfence-radiusd-acct stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-radiusd-auth MATCHING "pf/raddb -n auth"
    group PacketFence
    start program = "[% SERVICE_BIN %] packetfence-radiusd-auth restart"
    stop program  = "[% SERVICE_BIN %] packetfence-radiusd-auth stop"
    if failed host 127.0.0.1 port 18120 type udp protocol radius secret testing123 for 5 cycles then alert
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-redis_queue MATCHING "redis-server \*:6379"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service redis_queue restart" with timeout 60 seconds
    stop program = "/usr/local/pf/bin/pfcmd service redis_queue stop"
    if failed host 127.0.0.1 port 6380 protocol redis for 5 cycles then alert
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-netdata MATCHING "netdata"
    group PacketFence
    start program = "[% SERVICE_BIN %] packetfence-netdata restart"
    stop program  = "[% SERVICE_BIN %] packetfence-netdata stop"
    if 3 restarts within 10 cycles then alert

CHECK PROCESS packetfence-stat MATCHING "pfstats"
    group PacketFence
    start program = "[% SERVICE_BIN %] packetfence-stats restart"
    stop program  = "[% SERVICE_BIN %] packetfence-stats stop"
    if 3 restarts within 10 cycles then alert
    
CHECK PROCESS packetfence-httpd.dispatcher MATCHING "httpd.dispatcher"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service httpd.dispatcher start" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service httpd.dispatcher stop"
    if 3 restarts within 10 cycles then alert
    if failed host 127.0.0.1 port 8888 protocol http status 501 for 5 cycles then restart

CHECK PROCESS packetfence-pfsso MATCHING "pfsso"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service pfsso start" with timeout 60 seconds
    stop program  = "/usr/local/pf/bin/pfcmd service pfsso stop"
    if 3 restarts within 10 cycles then alert
    if failed host localhost port 8777 protocol http status 404 for 5 cycles then restart

[% IF DOMAINS.size > 0 %]
CHECK PROCESS packetfence-winbind MATCHING "winbindd-wrapper"
    group PacketFence
    start program = "/usr/local/pf/bin/pfcmd service windbindd restart" with timeout 60 seconds
    stop program = "/usr/local/pf/bin/pfcmd service windbindd stop"
    if 3 restarts within 10 cycles then alert

[% FOREACH domain IN DOMAINS.keys %]
CHECK PROCESS packetfence-winbind-[% domain %] MATCHING "/chroots/[% domain %] /usr/sbin/winbindd"
    group PacketFence
    if changed ppid then alert
    depends on packetfence-winbind
[% END %]

[% END %]

check program monitoring-mysql-connections with path /usr/local/pf/addons/monit/monitoring-scripts/monitor_mysql_connections.pl
    group OS
    every 30 cycles    # every minute (if 1 cycle is 2 seconds)
    if status != 0 then alert

